use  FLApps;
db.dropDatabase();

use FLApps;

function add(CN) {
    return addUnit(CN, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
}
function addUnit(CN, strRef)  {

    if (CN.length == 0)
    {
	return "0";
    }
    var lastChar = CN[CN.length -1];
    var CN2 = CN.substr(0, CN.length -1);
    
    var iPos = strRef.indexOf(lastChar, 0);

    if (iPos == -1)
	    throw ("addUnit: lastChar not found in ref...");
    if (iPos == strRef.length-1)
    {
	    CN2=addUnit (CN2, strRef);
	    return CN2 + '0';
    }
    lastChar = strRef[strRef.indexOf(lastChar, 0) + 1];
    return CN2 + lastChar;
}
function getNewCN(typeName, eid){
    print ("getNewCN: " + typeName + "," + eid);
	if (eid < 3 && typeName == "F")
	    throw ("getNewCN: Impossible to add field to the data dictionary (" + eid + ")");
	    
	if (typeName != "F")
		eid="0";
		
	var CN = db.Master_2.find({ "j.3": typeName} ).sort( {"j.1":-1, "j.1":-1 }).limit(1).toArray();

	if (CN == "" ){
		throw ("getNewCN: impossible to get a new CN...");
	}
	
	return add(CN[0]["j"]["1"]);
}
// Add data to a Master_xx collection
function dataAdd(eId, j){
    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	throw ("dataAdd: Collection : Master_" + eId + " not found");
    }
    
    var id = eId["_id"];
    if (id == null){
	id = new ObjectId;
	eId["_id"] = id;
	print ("New id : " + id);
    }
	    
    db["Master_" + eId].save( { _id:j._id, "v":1, "j":j } );
    var err = db.getLastError();
    var ret;
    if (err == null){
	ret= {'isOk':true, 'msg':""};    
    }
    else {
	printjson(err);
	ret = {'isOk':false, 'msg':err};
    }

    return (ret);
}
function dataGet(eId, id){
    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	throw ("dataGet: Collection : Master_" + eId + " unknown");
    }
	    
    var x = db["Master_" + eId].findOne( {_id: id });
    if (x == "")
	return "";
    
    return x["j"];
}
function jSonToMaster_0(_id, singulier, pluriel, description){
    
    if (singulier == pluriel)
	return {
		"_id": _id,
		"1": [singulier], 
		"3": description, 
		"5": [],
		"9":[]
		};
    
    return {
	    "_id": _id,
	    "1": [singulier, pluriel], 
	    "3": description, 
	    "5": [],
	    "9":[]
	    };
}

function jSonToMaster_1(_id, name, lEid, lDesc, lCard, lStroreHere, lProps, rEid, rDesc, rCard, rStoreHere, rProps) { 
    
    return  {
		_id: _id,
		"2": name,
		"d": [
		    {"e":0, "f": lEid, "g": lDesc, "h": lCard, "j":lStroreHere, "i": lProps },
		    {"e":1, "f": rEid, "g": rDesc, "h": rCard, "j":rStroreHere, "i": rProps }
		]
	    };
}

function jSonToMaster_2(eid, cn, typeName, realName){
    
    return {"l": eid, "m": cn, "n": typeName, "o": realName}; 
}

// handle name == names
function createNewCollection(name, names, desc){
	if ( db.Master_0.find( { "j.1": name } ).toArray() != "")
		throw ("createNewCollection: Collection " + name + "already exist");
	if ( db.Master_0.find( { "j.1": names }).toArray() != "")
		throw ("createNewCollection: Collection " + names + "already exist");
	
	var CN = getNewCN("E", "");

	if (CN < 4)
	    throw ("createNewCollection: Impossible to create a new Entity with CN = " + CN);

	var e = jSonToMaster_0(CN, name, names, desc);
	dataAdd ( 0, e);
	
	var m = jSonToMaster_2("0", CN, "E", name);
	dataAdd(2, m);

	db.createCollection('Master_'+CN);
	
	return CN;
}
function createNewRelation(name, lEid, lDesc, lCard, lStroreHere, lProps, rEid, rDesc, rCard, rStoreHere, rProps){
	if ( db.Master_0.find( { "j.1": leftRel["4"] } ).toArray() != "")
		throw ("createNewRelation: Collection " + leftRel["4"] + "already exist");
	if ( db.Master_0.find( { "j.1": rightRel["4"] }).toArray() != "")
		throw ("createNewRelation: Collection " + rightRel["4"] + "already exist");
	
	var CN = getNewCN("R", "");

	if (CN < 4)
	    throw ("createNewRelation: Impossible to create a new Relation with CN = " + CN);

	var cn = jSonToMaster_2("0", CN, "R", name);
	dataAdd(2, cn);
	
	var r = jSonToMaster_2(CN, name, lEid, lDesc, lCard, lStroreHere, lProps, rEid, rDesc, rCard, rStoreHere, rProps);
	dataAdd(1, r);
	
	return CN;
}

// linked field ??
function createNewField(entityId, fName ){
	if (db.Master_0.find({ _id: entityId.toString() }).toArray() == "")
		throw ("createNewField: Collection " + entityId + " not found");
	
	var CN = getNewCN("F", entityId);
	
	if (CN== "")
		CN=entityId + "@0";

	var m = jSonToMaster_2(entityId, CN, "F", fName);
	dataAdd(2, m);
}
function addIndex(eId, indexName, keys, props){
    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	throw ("addIndex: Collection : Master_" + eId + " not found");
    }
    
    props["name"] = indexName;
    
    db["Master_" + eId].ensureIndex (keys, props);

    var strKeys;
    
    for (var i in keys){
	var tmp = new String(keys[i]);
	tmp = tmp.replace(".", "_");
	
	strKeys[i}= tmp;
    }
        
    db.Master_0.update({_id:eId},
		       {$push: {"j.5":{"6": indexName, "6": strKeys, "7":props } }});
    
}
   
    db.createCollection('Master_0');
    db.Master_0.ensureIndex({"j.1":1}, {"unique": "true"} );
    
    e = jSonToMaster_0("0", "Entity", "Entities","Entity collection");
    dataAdd(0, e);
    
    e = jSonToMaster_0("1", "Relation", "Relations", "Relation collection");
    dataAdd(0, e);
    
    e = jSonToMaster_0("2", "miniName", "miniNames","miniName collection");
    dataAdd(0, e);
    
    e = jSonToMaster_0("3", "frameDef", "frameDefs", "Application definition collection");
    dataAdd(0, e);
    
    db.createCollection('Master_1');
    db.Master_1.ensureIndex({"j.3":1}, {"unique": "false"} );
    
    db.createCollection('Master_2');
    db.Master_2.ensureIndex({"j.1":1, "j.4":1}, {"unique": "true"} );
    db.Master_2.ensureIndex({"j.2":1},          {"unique": "true"} );
    
    db.createCollection('Master_3');
    
    dataAdd(2, {"l": "0", "m": "0", "n": "E", "o": "Entities"} ); 
    dataAdd(2, {"l": "0", "m": "1", "n": "F", "4": "Names"} ); 
    dataAdd(2, {"l": "0", "m": "3", "n": "F", "4": "Description"} ); 
    dataAdd(2, {"l": "0", "m": "5", "n": "F", "4": "Indexes"} ); 
    dataAdd(2, {"l": "0", "m": "6", "n": "F", "4": "IndexName"} ); 
    dataAdd(2, {"l": "0", "m": "7", "n": "F", "4": "Keys"} ); 
    dataAdd(2, {"l": "0", "m": "8", "n": "F", "4": "Properties"} ); 
    dataAdd(2, {"l": "0", "m": "9", "n": "F", "4": "cachedFields"} ); 
    dataAdd(2, {"l": "0", "m": "a", "n": "F", "4": "relationId"} ); 
    dataAdd(2, {"l": "0", "m": "b", "n": "F", "4": "side"} );
    
    dataAdd(2, {"l": "1", "m": "c", "n": "E", "4": "Relations"} );
    dataAdd(2, {"l": "1", "m": "2", "n": "E", "4": "Name"} );
    dataAdd(2, {"l": "1", "m": "d", "n": "F", "4": "entities"} ); 
    dataAdd(2, {"l": "1", "m": "e", "n": "F", "4": "side"} ); 
    dataAdd(2, {"l": "1", "m": "f", "n": "F", "4": "entityId"} ); 
    dataAdd(2, {"l": "1", "m": "g", "n": "F", "4": "Description"} ); 
    dataAdd(2, {"l": "1", "m": "h", "n": "F", "4": "Cardinality"} ); 
    dataAdd(2, {"l": "1", "m": "i", "n": "F", "4": "Props"} ); 
    dataAdd(2, {"l": "1", "m": "j", "n": "F", "4": "storeRels"} ); 
    
    dataAdd(2, {"l": "2", "m": "k", "n": "E", "4": "miniNames"} ); 
    dataAdd(2, {"l": "2", "m": "l", "n": "F", "4": "entityId"} ); 
    dataAdd(2, {"l": "2", "m": "m", "n": "F", "4": "fieldId"} ); 
    dataAdd(2, {"l": "2", "m": "n", "n": "F", "4": "type"} ); 
    dataAdd(2, {"l": "2", "m": "o", "n": "F", "4": "realName"} );

    dataAdd(2, {"l": "3", "m": "p", "n": "E", "4": "frameDef"} ); 

