use FLApps;
db.dropDatabase();

use FLApps;

var tabCodec=[
	// Entity
	{"entityCN":"_id", "singular":"6", "plural":"H", "description":"7", "index":"F", "cachedFI":"G", "indexName":"8", "indexKeys":"C", "indexProperties":"D"},
	{"_id":"entityCN", "6":"singular", "H":"plural", "7":"description", "F":"index", "G":"cachedFI", "8":"indexName", "C":"indexKeys", "D":"indexProperties"},
	// Field
	{"fieldCN":"_id", "name":"6", "description":"7", "typeUI":"A"},
	{"_id":"fieldCN", "6":"name", "7":"description", "A":"typeUI"},
	// Relation
	{"relationCN":"_id", "relationName":"6", "left":"K", "right":"L", "linkedCN":"M", "cardinality":"O", "verb":"P", "storeIndex":"Q", "dataCached":"R", "format":"S"},
	{"_id":"relationCN", "6":"relationName", "K":"left", "L":"right", "M":"linkedCN", "O":"cardinality", "P":"verb", "Q":"storeIndex", "R":"dataCached", "S":"format"},
	// for getName
	{"6":"name"},
	{"name":"6"}
	    ];

function add(CN) {
    return addUnit(CN, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
};
function addUnit(CN, strRef)  {

    if (CN == null)
	throw ("addUnit : can't have a null CN in parameter");

    if (strRef == null || strRef.length == 0)
	throw ("addUnit : strRef is null, or empty !");

    if (CN.length == 0)
    {
	return "0";
    }

    var lastChar = CN[CN.length -1];
    var CN2 = CN.substr(0, CN.length -1);
    
    var iPos = strRef.indexOf(lastChar, 0);

    if (iPos == -1)
	    throw ("addUnit: lastChar not found in ref...");
    if (iPos == strRef.length-1)
    {
	    CN2=addUnit (CN2, strRef);
	    return CN2 + '0';
    }
    lastChar = strRef[strRef.indexOf(lastChar, 0) + 1];
    return CN2 + lastChar;
};

function getNewCN() {
    try {
	var iLoop = 3;
	
	// 3 tries to get a new CN
	while (iLoop > 0)
	{
	    var CN = db.Master_0.findOne( {_id:"0"}, {_id:0, "j.J":1} );
    
	    if (CN == null || CN == "" ){
		    return "0";
	    }
	    CN=CN["j"]["J"];
	    
	    var CN2=add(CN);
	    
	    // If another user requested a new CN, rsl.lastErrorObject.n will be 0
	    var rsl = db.Master_0.findAndModify({
			query: {_id:"0", "j.J":CN },
			update: {$set: {"j.J":CN2}} });

	    if (rsl != null)
		return CN2;
	    
	    // retry
	    iLoop = iLoop -1;
	}
        throw ("getNewCN: unable to update");
    }
    catch(err)
    {
        return formatResponseError(99, "getNewCN: " + err);
    }
};


// Format JSON
function jSonToMaster_F (eid, cn, name, desc, textUI){
    return {
	    _id: cn,
	    4: eid,
	    5: "F",
	    6: name,
	    7: desc,
	    A: textUI
    };
}

function jSonToMaster_E(CN, singulier, pluriel, description){
    if (CN=="0")
	return {
		_id: CN,
		"4": "",
		"5": "E",
		"6": singulier,
		"7": description,
		"F":[],
		"G":[],
		"H": pluriel,
		"J": "0"
	};
    
    return {
	    _id: CN,
	    "4": "",
	    "5": "E",
	    "6": singulier,
	    "7": description,
	    "F":[],
	    "G":[],
	    "H": pluriel
    };
}
   
function jSonToMaster_R(cn, name, lEid, lDesc, lCard, lStroreHere, lCached, lFormat, rEid, rDesc, rCard, rStoreHere, rCached, rFormat) { 
    
    return {
	    _id: cn,
	    "4": "",
	    "5": "R",
	    "6": name,
	    "7": lDesc,
	    "K":{
		"M": lEid,
		"N": 0,
		"O": lCard,
		"P": lDesc,
		"Q": lStroreHere,
		"R": lCached,
		"S": lFormat
		},
	    "L":{
		"M": rEid,
		"N": 1,
		"O": rCard,
		"P": rDesc,
		"Q": rStoreHere,
		"R": rCached,
		"S": rFormat
		}
    };
}

function entityAdd(name, names, desc){
    try {
	var query={};
    
	query["j.6"]=name;
	if ( db.Master_0.find( query ).toArray() != "")
		throw ("Collection " + name + " already exists");
	    
	query["j.6"]=names;
	if ( db.Master_0.find( query ).toArray() != "")
		throw ("Collection " + names + " already exists");
	
	var CN = getNewCN();
    
	var e = jSonToMaster_E (CN, name, names, desc);
	db.createCollection("Master_"+CN);
    
	dataInsert(0, e);
	return formatResponseOK({entityCN:CN});
    }
    catch(err)
    {
        return formatResponseError(99, "entityAdd: " + err);
    }
}
//
function formatResponseOK(j, r){
    ctrl = {isOk:true};
    
    if (j==null)
	j={};
	
    if (r==null)
	r={};

    var rtn = {};

    rtn.ctrl = ctrl;
    rtn.j = j;
    rtn.r = r;

    return rtn;    
}
function formatResponseError(errNo, errMsg){
    if (errMsg == null)
	errMsg = "formatResponseError: no error message provided";
	
    if (errNo == null)
	ctrl = {isOk:false, errNo:9999, errMsg: errMsg};
    
    var rtn = {};

    rtn.ctrl = {isOk:false, errNo: errNo, errMsg:errMsg};
    rtn.j = {};
    rtn.r = {};

    return rtn;    
}

function entityGet(param){
    try {
	if (param == null || param.entityCN == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.findOne({_id: param.entityCN}, {_id:0, "j":1});
	if (rsl == null)
	    throw ("no Entity found");

	rsl = decodeJSonDico(rsl, 1);

	return formatResponseOK( rsl );
    }
    catch(err)
    {
        return formatResponseError(99, "entityGet: " + err);
    }
}
function entityGetByName(param){
    try {
	if (param == null || param.singular == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.findOne({"j.5":"E", "j.6":param.singular}, {_id:0, "j":1});
	if (rsl == null)
	    throw ("no Entity found");

	rsl = decodeJSonDico(rsl, 1);

	return formatResponseOK( rsl );
    }
    catch(err)
    {
        return formatResponseError(99, "entityGetByName: " + err);
    }
}
function entityGetAll(param){
    try {
	if (param == null )
	    throw ("entityGetAll: invalid parameter");
	
	param["j.5"]="E";
    
	var rsl = db.Master_0.find(param, {_id:0, "j":1}).toArray();
	
	if (rsl == null)
	    throw ("No Entity found");

	var result=[];
	for(var it in rsl){
	    result.push(decodeJSonDico(rsl[it], 1));
	}
	return formatResponseOK( result );
    }
    catch(err)
    {
        return formatResponseError (99, "entityGetAll: " + err);
    }

}
function fieldGet(param){
    try {
	if (param == null || param.fieldCN == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.findOne( {_id: param.fieldCN}, {_id:1, "j":1} );
	if (rsl == null)
	    throw ("no field found");

	return (formatResponseOK( decodeJSonDico(rsl, 1) ));
    }
    catch(err)
    {
        return formatResponseError(99, "entityGet: " + err);
    }
}
function fieldGetByName(param){
    try {
	if (param == null || param.entityCN == null|| param.name == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.findOne( {"j.4": param.entityCN, "j.6":param.name}, {_id:1, "j":1} );
	if (rsl == null)
	    throw ("no field found");

	return (formatResponseOK( decodeJSonDico(rsl, 1) ));
    }
    catch(err)
    {
        return formatResponseError(99, "entityGetByName: " + err);
    }
}
function fieldGetAllByName(param){
    try {
	if (param == null || param.fieldName == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.find( {"j.5": "F", "j.6":param.fieldName}, {_id:1, "j":1} ).toArray();
	if (rsl == null)
	    throw ("no field found");

	var result=[];
	for(var it in rsl){
	    result.push( decodeJSonDico(rsl[it], 1) );
	}

	return (formatResponseOK( result ));
    }
    catch(err)
    {
        return formatResponseError(99, "entityGetByName: " + err);
    }
}
function fieldGetAll(param){
    try {
	if (param == null || param.entityCN == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.find( {"j.4": param.entityCN, "j.5":"F"}, {_id:1, "j":1} ).toArray();
	if (rsl == null)
	    throw ("no Entity found");

	var result=[];
	for(var it in rsl){
	    result.push( decodeJSonDico(rsl[it], 1) );
	}

	return (formatResponseOK( result ));
    }
    catch(err)
    {
        return formatResponseError(99, "entityGetAll: " + err);
    }
}
function getName(param) {
    try {
	if (param == null || param.CN == null)
	    throw ("invalid parameter");
	
	var rsl = db.Master_0.findOne( {_id: param.CN}, {_id:0, "j":1} );
	if (rsl == null)
	    throw ("no field found");

	return formatResponseOK( decodeJSonDicoGeneric(rsl.j, 6));
    }
    catch(err)
    {
        return formatResponseError(99, "getName: " + err);
    }
}
   
    
}
function relationAdd(name, lEid, lDesc, lCard, lStroreHere, lCached, lFormat, rEid, rDesc, rCard, rStoreHere, rCached, rFormat){
	
	var CN = getNewCN();

	var r = jSonToMaster_R(CN, name, lEid, lDesc, lCard, lStroreHere, lCached, lFormat, rEid, rDesc, rCard, rStoreHere, rCached, rFormat);
	
        return dataInsert(0, r);
}
function relationGet(param){
    try {
	if (param == null || param.relationCN == null)
	    throw ("relationGet: invalid parameter");

	var rsl = db.Master_0.findOne({_id: param.relationCN, "j.5":"R"}, {_id:0, "j":1});

	if (rsl == null)
	    throw ("relationGet: no Relation found");

        return formatResponseOK( decodeJSonDico(rsl, 1) );
    }
    catch(err)
    {
        return formatResponseError( 99, "relationGet: " + err);
    }    
}

function relationGetAll(){
    try {
	var rsl = db.Master_0.find({"j.5":"R"}, {_id:0, "j":1}).toArray();
	if (rsl == null)
	    throw ("relationGet: no Relation found");

	var result=[];
	for(var it in rsl){
	    result.push( decodeJSonDico(rsl[it], 1) );
	}

	return formatResponseOK(result);
    }
    catch(err)
    {
        return formatResponseError(99, "entityGetAll: " + err);
    }    
}

function decodeJSonDico(j, sens){
    try {
	if (sens != 0 && sens != 1)
	    throw ("invalid argument sens");
	
	if (j["j"]["5"]== null)
	    throw ("invalid argument j");
	
	switch (j["j"]["5"])
	{
	    case "E":
		return decodeJSonDicoGeneric(j.j, sens);
	    case "F":
		return decodeJSonDicoGeneric(j.j, sens+2);
	    case "R":
		return decodeJSonDicoGeneric(j.j, sens+4);
	}
	throw ("Unknown type (5)");
    }
    catch(err)
    {
        return formatResponseError(99, "decodeJsonDico: " + err);
    }    
}

function jsonConcat(o1, o2, prefix) {
 for (var key in o2) {
  //print ("key: " + prefix+key + " => " + 2[key]);
  o1[prefix+key] = o2[key];
 }
 return o1;
}

function decodeJSonDicoGeneric(js, indTab){
    //print("Entering DicoGeneric");
    //printjson(js);
    //print (indTab);
    //printjson(tabCodec[indTab]);

    var jd={};

    for ( var key in js ){
	//print ("Analyze: " + key + "->" + js[key] + ", type: " + typeof(js[key]) + ", tabCodec[indTab][k] ?: " + tabCodec[indTab][key] );

	// look for sub nodes
	if (typeof (js[key]) == "object" )
	{
		jsonConcat(jd, decodeJSonDicoGeneric(js[key], indTab), tabCodec[indTab][key]+"_");
	}
	else{
	    if (tabCodec[indTab][key] != null) {
		//print (key + ", type : " + typeof(js[key]) );
		jd[tabCodec[indTab][key]]=js[key];
	    }
	}
    }
    //print ("returning");
    //printjson(jd);
    return jd;
}

function fieldAdd(entityCN, name, description, textUI) {
    try {
	if (db.Master_0.find({ _id: entityCN }).toArray() == "")
		throw ("Collection " + entityId + " not found");
	
	var CN = getNewCN();

	var m = jSonToMaster_F(entityCN, CN, name, description, textUI);
	printjson(m);
	var rsl=dataInsert(0, m);
	printjson(rsl);
	
	var check = db.Master_0.find({ _id: CN}).toArray();
	if (check == null)
	    throw ("Document not created !!");
	
	return formatResponseOK({fieldCN:CN});
    }
	catch(err)
	{
            return formatResponseError( 99, "fieldAdd: " + err);
	}

}

// Add data to a Master_xx collection
function dataAdd(eId, j){
	try{
	    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
		throw ("dataAdd: Collection : Master_" + eId + " not found");
	    }

	    var id = j["_id"];
	    if (id == null){
			id = new ObjectId;
			j["_id"] = id;
			print ("New id : " + id);
			printjson(j);
	    }
		    
	    db["Master_" + eId].save( { _id:j._id, v:1, j:j } );

	    var err = db.getLastError();

	    if (err != null)
			throw err;

		// Nico : do the work for managing the Relations

	    return formatResponseOK( {} );
    }
	catch(err)
	{
		return formatResponseError( 99, err);
	}
}
// Add data to a Master_xx collection
function dataInsert(eId, j, r){
    try{
	if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	    throw ("dataAdd: Collection : Master_" + eId + " not found");
	}

	var id = j["_id"];
	if (id == null){
		    id = new ObjectId;
		    j["_id"] = id;
		    print ("New id : " + id);
		    printjson(j);
	}
	
	if (r == null)
	    r={};
	    
	db["Master_" + eId].insert( { _id:j._id, v:1, j:j, r:r} );

	var err = db.getLastError();

	if (err != null)
		    throw err;

	    // Nico : do the work for managing the Relations

	var check=db["Master_" + eId].insert( { _id: id } );
	if (check == null)
	    throw ("document not created .... ");
	    
        return formatResponseOK( {"cn":id} );
    }
	catch(err)
	{
            return formatResponseError( 99, "dataInsert: " + err);
	}
}
function dataGet(eId, id){
    try {
	if ( db.getCollection("system.namespaces").find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	    throw ("Collection : Master_" + eId + " unknown");
	}
		
	var x = db["Master_" + eId].findOne( {_id: id });
	if (x == "")
		    throw ("no data found");
	
	if(x["r"] == null)
	    x["r"]={};
	    
	return formatResponseOK( x.j, x.r );
    }
    catch(err)
    {
	    return formatResponseError( 99, "dataGet: " + err);
    }
}

    // Generate our dictionary !
    db.createCollection('Master_0');
    
    // CN:0
    entityAdd("FLDico", "FLDICOS","FrameLink internal dictionary");
    //CN:1
    entityAdd("Joao", "Joaos", "FrameLink application dictionary");
    //CN:2
    getNewCN();
    // CN:3
    getNewCN();
    // CN:4
    fieldAdd("0", "entityCN", "Entity compressed name","system");
    // CN: 5
    fieldAdd("0", "typeCN", "type of compressed name","system");
    // CN: 6
    fieldAdd("0", "realName", "full name - singular","system");
    // CN: 7
    fieldAdd("0", "description", "this is a description","system");
    //CN : 8
    fieldAdd("0", "indexName", "this is the name of the index","system");

    // CN:9
    getNewCN();
    // CN: A
    fieldAdd("0", "textUI", "UI object associated with a field","system");
    // CN: B - E
    getNewCN();
    getNewCN();
    fieldAdd("0", "indexKeys", "this are the fields used in the index","system");
    fieldAdd("0", "indexProperties", "this are the cached fields","system");

    // CN: F
    fieldAdd("0", "indexes", "list of indexes for this entity","system");
    // CN: G
    fieldAdd("0", "cachedFI", "list of cached fields for this entity","system");
    // CN: H
    fieldAdd("0", "pluralName", "plural name","system");
    // CN: I
    fieldAdd("0", "lastCNAssigned", "last CN used (only _id=00)","system");
    // CN :  J
    getNewCN();

    // CN: K
    fieldAdd("0", "left", "left definition of relation","system");
    // CN: L
    fieldAdd("0", "right", "right definition of relation","system");
    // CN: M
    fieldAdd("0", "linkedCN", "entity compressed name used in relation","system");
    // CN: N
    fieldAdd("0", "side", "side of relation (0 for left, 1 for right)","system");
    // CN : O
    fieldAdd("0", "cardinality", "cardinality of this side of relation","system");
    // CN:P
    fieldAdd("0", "verb", "verb describing the relation","system");
    // CN: Q
    fieldAdd("0", "storedIndex", "Is index stored on this side of the relation","system");
    // CN: R
    fieldAdd("0", "dataCached", "Are the data cached on this side of the relation","system");
    //CN:S
    fieldAdd("0", "format", "data cache format","system");
    //CN :  T-Y
    getNewCN();
    getNewCN();
    getNewCN();
    getNewCN();
    getNewCN();
    getNewCN();
    // CN: Z
    fieldAdd("0", "Rels", "relation information","system");

    // CN : "00" => first available CN for user data


function indexAdd(eId, indexName, keys, props){
    try {
	props["name"]=indexName;
	//print ("create idx:  db['Master_" + eId + "'].ensureIndex (" + tojson(keys) + ", " + tojson(props) + "); " );
    
	var i = db["Master_" + eId].ensureIndex (keys, props);
	if (i.ok != 1)
	    throw ("error " + i.code + " : " + i.errmsg);
	
	var strKeys={};
	var tmp;
	
	for (var i in keys){
	    //print (i);
	    tmp = new String ( keys[i] ).replace('.','_');
	    strKeys[i]= tmp;
	    // print(tmp);
	}
	//print ("update: db.Master_0.update( {_id:" + eId + "}, {$push: {'j'.'F': '8':" + indexName + ", 'D':" + strKeys + ", 'E'" + props + "}} );");
	var idx = {"j.F": {"8": indexName, "D": strKeys, "E": props}};
	// printjson(idx);
	db.Master_0.update(  {_id: eId},
			     {  $push:  idx }
			  );
	return formatResponseOK( {} );
    }
    catch(err)
    {
	return formatResponseError (99, "indexAdd: " + err);
    }
}

var idx = indexAdd("0", "UnikNamesMaster0", {"j.4":1, "j.6":1}, {"unique":true});
printjson (idx);

// API Simulation
var flDico=function() {};
flDico.prototype.getName=function (jj) { return getName(jj); };


flDico.prototype.entityAdd=function (jj) { return entityAdd(jj.singular, jj.plural, jj.description); };
flDico.prototype.entityGet=function (jj) { return entityGet(jj); };
flDico.prototype.entityGetByName=function (jj) { return entityGetByName(jj); };
// for entityGetAll : on the where clause, only compressed name can be used. We'll see on the final implementation...
flDico.prototype.entityGetAll=function (jj) { return entityGetAll(jj); };

flDico.prototype.fieldAdd=function (jj) { return fieldAdd(jj.entityCN, jj.name, jj.description, jj.typeUI); };
flDico.prototype.fieldGet=function (jj) {  return fieldGet(jj); };
flDico.prototype.fieldGetByName=function (jj) {  return fieldGetByName(jj); };
flDico.prototype.fieldGetAll=function (jj) {  return fieldGetAll(jj); };
flDico.prototype.fieldGetAllByName=function (jj) {  return fieldGetAllByName(jj); };

flDico.prototype.relationAdd=function (jj) { return relationAdd(jj.relationName, jj.left.entityCN, jj.left.verb, jj.left.cardinality, jj.left.storeRelation, jj.left.cache, jj.left.format,
								                 jj.right.entityCN, jj.right.verb, jj.right.cardinality, jj.right.storeRelation, jj.right.cache, jj.right.format); };
flDico.prototype.relationGet=function (jj) { return relationGet(jj); };
flDico.prototype.relationGetAll=function () { return relationGetAll(); };

flDico.prototype.indexAdd=function (jj) { return entityAdd(jj.singular, jj.plural, jj.description); };

var flData=function(){};
flData.prototype.get=function(x, j){return dataGet(x, j);};
flData.prototype.insert=function(x, j){return dataInsert(x, j);};
flData.prototype.update=function(x, j){return dataUpdate(x, j);};
flData.prototype.remove=function(x, j){return dataRemove(x, j);};
