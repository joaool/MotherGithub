use FLApps;
db.dropDatabase();

use FLApps;

function add(CN) {
    return addUnit(CN, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
}
function addUnit(CN, strRef)  {

    if (CN.length == 0)
    {
	return "0";
    }
    var lastChar = CN[CN.length -1];
    var CN2 = CN.substr(0, CN.length -1);
    
    var iPos = strRef.indexOf(lastChar, 0);

    if (iPos == -1)
	    throw ("addUnit: lastChar not found in ref...");
    if (iPos == strRef.length-1)
    {
	    CN2=addUnit (CN2, strRef);
	    return CN2 + '0';
    }
    lastChar = strRef[strRef.indexOf(lastChar, 0) + 1];
    return CN2 + lastChar;
}
function getNewCN(){
		
	var CN = db.Master_2.find({},{_id:0, "j.l":1 ).sort( {"j.l":-1, "j.l":-1 }).limit(1).toArray();

	if (CN == "" ){
		return "0;
	}
printjson(CN);	
	return add(CN[0]["j"]["l"]);
}
var MASTER_0=0;
var JOAO=1;
var M0_CN= "3";
var M0_ECN="4";
var M0_TYPE="5";
var M0_REALNAME="6";
var M0_DESCRIPTION="7";
var M0_info = "8";

var F_TEXTUI="A";

var E_INDEXES="F";
var E_CACHEDFI="G";
var E_PLURAL="H";

var R_ECN="K";
var R_SIDE="L";
var R_CARD="M";
var R_DESCRIPTION="N";
var R_STOREREL="O";
var R_CACHED="P";
var R_FORMAT="Q";


// Add data to a Master_xx collection
function dataAdd(eId, j){
	try{
	    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
		throw ("dataAdd: Collection : Master_" + eId + " not found");
	    }

	    var id = eId["_id"];
	    if (id == null){
			id = new ObjectId;
			eId["_id"] = id;
			print ("New id : " + id);
			printjson(j);
	    }
		    
	    db["Master_" + eId].save( { _id:j._id, v:1, j:j } );

	    var err = db.getLastError();

	    if (err != null)
			throw err;

		// Nico : do the work for managing the Relations

	    return ( {isOk:true, cn:ret} );
    }
	catch(err)
	{
		return ( {isOk:false, errNo:99, errMsg:err} );
	}
}
function dataGet(eId, id){
	try {
    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	throw ("dataGet: Collection : Master_" + eId + " unknown");
    }
	    
    var x = db["Master_" + eId].findOne( {_id: id });
    if (x == "")
		throw ("dataGet: no data found");
    
    return ( {isOk:true, j:x["j"]} );
	}
	catch(err)
	{
		return ( {isOk:false, errNo:99, errMsg:err} );
	}
}
function jSonToMaster_E(CN, singulier, pluriel, description){
    
    return {
	    _id: CN,
	    "3": CN,
	    "4": "",
	    "5": "E",
	    "6": singulier,
	    7: description,
	    "8": {
		"F":[],
		"G":[],
		"H": pluriel
	    }
    };
}
function jSonToMaster_R(cn, name, lEid, lDesc, lCard, lStroreHere, lCached, lFormat, rEid, rDesc, rCard, rStoreHere, rCached, rFormat) { 
    
    return {
	    _id: cn,
	    "3": cn,
	    "4": "",
	    "5": "R",
	    "6": name,
	    7: lDesc,
	    "8": [
		{
		    "K": lEid,
		    "L": 0,
		    "M": lCard,
		    "N": lDesc,
		    "O": lStroreHere,
		    "P": lCached,
		    "Q": lFormat
		},
		{
		    "K": rEid,
		    "L": 1,
		    "M": rCard,
		    "N": rDesc,
		    "O": rStoreHere,
		    "P": rCached,
		    "Q": rFormat
		}
	    ]
    };
}

function jSonToMaster_F(eid, cn, name, desc, textUI){
    return {
	    _id: eid+"@"+cn,
	    "3": cn,
	    "4": eid,
	    "5": "F",
	    "6": name,
	    7: desc,
	    "8": {
		    "A":textUI
	    }
    };
}

//
function entityAdd(name, names, desc){
	if ( db.Master_0.find( { "j."+M0_REALNAME: name } ).toArray() != "")
		throw ("createNewCollection: Collection " + name + "already exist");
	if ( db.Master_0.find( { "j.1": names }).toArray() != "")
		throw ("createNewCollection: Collection " + names + "already exist");
	
	var CN = getNewCN();

	if (CN < 4)
	    throw ("createNewCollection: Impossible to create a new Entity with CN = " + CN);

	var e = jSonToMaster_0(CN, name, names, desc);
	dataAdd ( 0, e);
	
	var m = jSonToMaster_2(CN, CN, "E", name);
	dataAdd(2, m);

	db.createCollection('Master_'+CN);
	
	return CN;
}
function createNewRelation(name, lEid, lDesc, lCard, lStroreHere, lProps, rEid, rDesc, rCard, rStoreHere, rProps){
	if ( db.Master_0.find( { "j.b": name } ).toArray() != "")
		throw ("createNewRelation: Collection " + leftRel["4"] + "already exist");
	if ( db.Master_0.find( { "j.b": name }).toArray() != "")
		throw ("createNewRelation: Collection " + rightRel["4"] + "already exist");
	
	var CN = getNewCN();

	if (CN < 4)
	    throw ("createNewRelation: Impossible to create a new Relation with CN = " + CN);

	var cn = jSonToMaster_2("0", CN, "R", name);
	dataAdd(2, cn);
	
	var r = jSonToMaster_1(CN, name, lEid, lDesc, lCard, lStroreHere, lProps, rEid, rDesc, rCard, rStoreHere, rProps);
	dataAdd(1, r);
	
	return CN;
}

// linked field ??
function createNewField(entityId, fName ){
	if (db.Master_0.find({ _id: entityId.toString() }).toArray() == "")
		throw ("createNewField: Collection " + entityId + " not found");
	
	var CN = getNewCN();

	var m = jSonToMaster_2(entityId, CN, "F", fName);
	dataAdd(2, m);
}
function addIndex(eId, indexName, keys, props){
    if ( db.getCollection('system.namespaces').find(  {"name": "FLApps.Master_" + eId } ).length() == 0 ){
	throw ("addIndex: Collection : Master_" + eId + " not found");
    }
    
    props["name"] = indexName;
    
    print ("create idx:  db['Master_" + eId + "'].ensureIndex (" + tojson(keys) + ", " + tojson(props) + "); " );

    db["Master_" + eId].ensureIndex (tojson(keys), tojson(props));

    var strKeys;
    var tmp;
    
    for (var i in keys){
	tmp = new String ( keys[i] ).replace('.','_');
	
	strKeys[i]= tmp;
    }
        
    print ("update: db.Master_0.update({_id:" + eId + "}, {$push: {'j.3':{'4': " + indexName + ", '5': " + tojson(strKeys) + ", '6':" + tojson(props) + " } }});");

    db.Master_0.update({_id:eId},
		       {$push: {"j.3":{"4": indexName, "5": tojson(strKeys), "6": tojson(props) } }});
    
}
   
    db.createCollection('Master_0');
    
    dataAdd(0, jSonToMaster_0("0", "Entity", "Entities","Entity collection"));
    dataAdd(0, jSonToMaster_0("1", "Relation", "Relations", "Relation collection"));
    dataAdd(0, jSonToMaster_0("2", "miniName", "miniNames","miniName collection"));
    dataAdd(0, jSonToMaster_0("3", "frameDef", "frameDefs", "Application definition collection"));
    addIndex(0, "Entity_unik_name", {"j.1":1}, {"unique": true} );
    
    db.createCollection('Master_1');
    addIndex(1, "Rel_unik_idx_name", {"j.b":1}, {"unique": true} );
    addIndex(1, "Rel_entity_side", {"j.c":1, "j.d":1}, {"unique": false} );
    
    db.createCollection('Master_2');
    addIndex(2, "MiniN_unik_name", {"j.b":1}, {"unique": true} );
    addIndex(2, "Rel_entity_side", {"j.c":1, "j.d":1}, {"unique": false} );
    
    db.createCollection('Master_3');
    
    dataAdd(2, jSonToMaster_2("0", "0", "E", "Entity"));
    dataAdd(2, jSonToMaster_2("0", "1", "F", "Names")); 
    dataAdd(2, jSonToMaster_2("0", "2", "F", "Description") ); 
    dataAdd(2, jSonToMaster_2("0", "3", "F", "Indexes")); 
    dataAdd(2, jSonToMaster_2("0", "4", "F", "IndexName")); 
    dataAdd(2, jSonToMaster_2("0", "5", "F", "Keys")); 
    dataAdd(2, jSonToMaster_2("0", "6", "F", "Properties")); 
    dataAdd(2, jSonToMaster_2("0", "7", "F", "cachedFields")); 
    dataAdd(2, jSonToMaster_2("0", "8", "F", "relationId")); 
    dataAdd(2, jSonToMaster_2("0", "9", "F", "side"));
    
    dataAdd(2, jSonToMaster_2("1", "a", "E", "Relations"));
    dataAdd(2, jSonToMaster_2("1", "b", "F", "Name"));
    dataAdd(2, jSonToMaster_2("1", "c", "F", "entities")); 
    dataAdd(2, jSonToMaster_2("1", "d", "F", "side")); 
    dataAdd(2, jSonToMaster_2("1", "e", "F", "entityId")); 
    dataAdd(2, jSonToMaster_2("1", "f", "F", "Description")); 
    dataAdd(2, jSonToMaster_2("1", "g", "F", "Cardinality")); 
    dataAdd(2, jSonToMaster_2("1", "h", "F", "storeRels")); 
    dataAdd(2, jSonToMaster_2("1", "i", "F", "Props")); 

    
    dataAdd(2, jSonToMaster_2("2", "j", "E", "miniNames")); 
    dataAdd(2, jSonToMaster_2("2", "k", "F", "entityId")); 
    dataAdd(2, jSonToMaster_2("2", "l", "F", "fieldId")); 
    dataAdd(2, jSonToMaster_2("2", "m", "F", "typeName")); 
    dataAdd(2, jSonToMaster_2("2", "n", "F", "realName"));

    dataAdd(2, jSonToMaster_2("3", "o", "E", "frameDef")); 

