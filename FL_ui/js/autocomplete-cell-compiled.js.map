{"version":3,"sources":["autocomplete-cell.js"],"names":[],"mappings":"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","file":"autocomplete-cell-compiled.js","sourcesContent":["/*\r\n  backgrid-autocomplete-cell\r\n  https://github.com/PeterDowdy/backgrid-autocomplete-cell\r\n\r\n  Copyright (c) 2013 Peter Dowdy and contributors\r\n  Licensed under the MIT @license.\r\n*/\r\n(function (factory) {\r\n\r\n    // CommonJS\r\n    if (typeof exports == \"object\") {\r\n        module.exports = factory(require(\"underscore\"),\r\n            require(\"backgrid\"));\r\n    }\r\n    // Browser\r\n    else if (typeof _ !== \"undefined\" &&\r\n        typeof Backgrid !== \"undefined\") {\r\n        factory(_, Backgrid);\r\n    }\r\n\r\n}(function (_, Backgrid) {\r\n\r\n    /**\r\n     AutocompleteCellEditor is a cell editor that renders an <input> element and initializes it as an autocomplete widget\r\n\r\n     See:\r\n\r\n       - [Autocomplete](http://jqueryui.com/autocomplete/)\r\n\r\n     @class Backgrid.Extension.AutocompleteCellEditor\r\n     @extends Backgrid.InputCellEditor\r\n   */\r\n    var AutocompleteCellEditor = Backgrid.Extension.AutocompleteCellEditor = Backgrid.InputCellEditor.extend({\r\n        formatter: Backgrid.StringFormatter,\r\n        tagName: \"input\",\r\n        attributes: {\r\n            type: \"text\"\r\n        },\r\n\r\n        /** @property */\r\n        autocompleteOptions: null,\r\n\r\n        /**\r\n           Sets the options for `autocomplete`. Called by the parent AutocompleteCell during edit mode.\r\n         */\r\n        setAutocompleteOptions: function (options) {\r\n            this.autocompleteOptions = options;\r\n        },\r\n        events: {},\r\n        initialize: function (options) {\r\n            Backgrid.InputCellEditor.prototype.initialize.apply(this, arguments);\r\n            //var lookupObj = AutocompleteCellEditor.prototype.lookupObj;\r\n            this.autocompleteUrl = options.column.get(\"autocompleteUrl\");\r\n            if (this.autocompleteUrl[this.autocompleteUrl.length] != '/') this.autocompleteUrl += '/';\r\n            this.minTermLength = options.column.get(\"minTermLength\");\r\n            this.resultsFormatter = options.column.get(\"resultsFormatter\");\r\n            this.labelProperty = options.column.get(\"labelProperty\");\r\n            _.bindAll(this, 'render', 'getAutocompleteCustomers', 'saveOrCancel', 'postRender');\r\n        },\r\n\r\n        /**\r\n           Renders an <input> element and then initializes an autocomplete widget off of it\r\n\r\n           @chainable\r\n         */\r\n        render: function () {\r\n            var thisView = this;\r\n            this.$el.autocomplete({\r\n                source: thisView.getAutocompleteCustomers,\r\n                select: function (event, ui) {\r\n                    if (!ui.item.value) {\r\n                        return;\r\n                    } else {\r\n                        thisView.model.set(thisView.column.attributes.name, ui.item.label);\r\n                    }\r\n                    thisView.saveOrCancel(event);\r\n                },\r\n                close: function (event) {\r\n                    thisView.saveOrCancel(event);\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        getAutocompleteCustomers: function (request, response) {\r\n            var thisView = this;\r\n            var term = request.term;\r\n            if (term.length < this.minTermLength) {\r\n                response([]);\r\n                return;\r\n            }\r\n            $.ajax({\r\n                url: thisView.autocompleteUrl + term,\r\n                contentType: 'application/json',\r\n                type: 'GET',\r\n                success: function (data) {\r\n                    var results = [];\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        if (typeof thisView.resultsFormatter == 'function')\r\n                            results.push(thisView.resultsFormatter(data[i]));\r\n                        else if (thisView.labelProperty) results.push({\r\n                            label: data[i][thisView.labelProperty]\r\n                        });\r\n                        else results.push({\r\n                            label: data[i]\r\n                        });\r\n                    }\r\n                    results = _.compact(results);\r\n                    if (results.length == 0) {\r\n                        results.push({\r\n                            label: \"No results found\",\r\n                            value: \"\"\r\n                        });\r\n                    }\r\n                    response(results);\r\n                    return;\r\n                },\r\n                error: function (err) {\r\n                    results.push({\r\n                            label: \"No results found\",\r\n                            value: \"\"\r\n                        });\r\n                    response(results);\r\n                    return;\r\n                }\r\n            });\r\n        },\r\n        saveOrCancel: function (e) {\r\n            var model = this.model;\r\n            var column = this.column;\r\n\r\n            var command = new Backgrid.Command(e);\r\n            if (e.type == \"autocompleteclose\") {\r\n                e.stopPropagation();\r\n                model.trigger(\"backgrid:edited\", model, column, command);\r\n            }\r\n        },\r\n        postRender: function (model, column) {\r\n            if (column == null || column.get(\"name\") == this.column.get(\"name\")) {\r\n                // move the cursor to the end on firefox if text is right aligned\r\n                if (this.$el.css(\"text-align\") === \"right\") {\r\n                    var val = this.$el.val();\r\n                    this.$el.focus().val(null).val(val);\r\n                } else this.$el.focus();\r\n            }\r\n            return this;\r\n        }\r\n    });\r\n\r\n    /**\r\n     AutocompleteCell is a cell class that renders a jQuery autocomplete widget during edit mode.\r\n\r\n     @class Backgrid.Extension.Select2Cell\r\n     @extends Backgrid.SelectCell\r\n   */\r\n    Backgrid.Extension.AutocompleteCell = Backgrid.StringCell.extend({\r\n        initialize: function (options) {\r\n            Backgrid.StringCell.prototype.initialize.apply(this, arguments);\r\n            this.listenTo(this.model, \"backgrid:edit\", function (model, column, cell, editor) {\r\n                if (column.get(\"name\") == this.column.get(\"name\")) {\r\n                    editor.setAutocompleteOptions(this.autocompleteOptions);\r\n                }\r\n            });\r\n        },\r\n        className: \"autocomplete-cell\",\r\n        editor: AutocompleteCellEditor\r\n    });\r\n}));"]}