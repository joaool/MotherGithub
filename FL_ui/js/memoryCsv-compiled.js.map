{"version":3,"sources":["memoryCsv.js"],"names":[],"mappings":"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","file":"memoryCsv-compiled.js","sourcesContent":["// The in-memory Store. Encapsulates logic to access wine data.\r\nwindow.csvStore = {\r\n    csvRows:{}, //a JSON of JSONs  {1:{},2:{}...n:{}}; //NOTE:each row  should have a boolean sync field to work in offline mode\r\n    numberOfRows:0,\r\n    attributesArr: null,\r\n    setAttributesArr: function(attributesArr){\r\n        //format [{label:\"xx\",name:fieldName,description:xDescription,type:xtype,typeUI:xTypeUI,enumerable:xEnumerable,key:xKey},{col2}...{}]\r\n        this.attributesArr = attributesArr;\r\n    },\r\n    getAttributesArr: function(){\r\n        return this.attributesArr;\r\n    },\r\n    getAttributesArrNoId: function(){//return [{attr1:x11,attr2:x21.,..attrN:xN1},{attr1:x12,attr2:x22.,..attrN:xN2}...{}]\r\n        var retArr = [];\r\n        _.each(this.attributesArr, function(element,index){\r\n            if (element.name!=\"id\")\r\n                retArr.push(element);\r\n        });\r\n        return retArr;\r\n    },\r\n    setEntityName: function(entityName){//sets entity name and csvStore.attributesArr\r\n        this.entityName = entityName;\r\n        // defines attributesArr to set in setAttributesArr(attributesArr)  -->format [{label:\"xx\",name:fieldName,description:xDescription,type:xtype,enumerable:xEnumerable},{col2}...{}]\r\n        var oEntity = FL.dd.getEntityBySingular(entityName);\r\n        this.setAttributesArr(oEntity.attributes);\r\n    },\r\n    getEntityName: function(){\r\n        return this.entityName;\r\n    },\r\n    setEnumerableForAttribute: function(attribute, arrOfValues){\r\n        _.each(this.attributesArr, function(element){\r\n            if (element.name== attribute)\r\n                element.enumerable = arrOfValues;\r\n        });\r\n    },\r\n    getEnumerableFromAttribute: function(attribute){//returns the content of enumerable or null if attribute does not exist\r\n        var xRet = null;\r\n        var elementWithEnum = _.find(this.attributesArr, function(element){ return element.name == attribute;});\r\n        if(elementWithEnum)\r\n            xRet = elementWithEnum.enumerable;\r\n        return xRet;\r\n    },    \r\n    extractEmailArray: function(){//returns an array of emails with format [{\"email\":\"e1@live.com\"},{\"email\":\"email2@gmail.com\"}..]\r\n        //only retrieves valid email formats\r\n        var attrArr = this.getAttributesArr();\r\n        // FL.common.printToConsole(\"-xxxx-->\"+JSON.stringify(attrArr));\r\n        var attrEl = _.find(attrArr,function(element){return element.typeUI == \"email\";});//find first email among fields\r\n        if(typeof attrEl ==\"undefined\")\r\n            attrEl = _.find(attrArr,function(element){return element.typeUI == \"emailbox\";});//find first email among fields old format\r\n        if(typeof attrEl ==\"undefined\"){\r\n            alert(\"memoryCsv.js extractEmailArray NO FIELD WITH typUI = email !!!!\");\r\n        }\r\n        // FL.common.printToConsole(\"-zzz-->\"+JSON.stringify(attrEl));\r\n        var nameOfFirstEmailField = attrEl.name;\r\n        // FL.common.printToConsole(\"-name-->\"+nameOfFirstEmailField);\r\n        var arrOfEmails = _.map(this.csvRows,function(value,key){\r\n            return {\"email\":value[nameOfFirstEmailField]}; \r\n        });\r\n        var arrOfEmails = _.filter(arrOfEmails,function(element){\r\n            return utils.is_email(element.email); //filters only valid emails\r\n        });\r\n\r\n        // FL.common.printToConsole(\"-www-->\"+JSON.stringify(arrOfEmails));\r\n        return arrOfEmails\r\n    },\r\n    getAttributesOfType: function(typeToSelect){//from this.attributesArr return a subset with type= typeToSelect\r\n        var retArr = _.filter(this.attributesArr, function(element){\r\n            //attributesArr format [{label:\"xx\",name:fieldName,description:xDescription,type:xtype,typeUI:xTypeUI,enumerable:xEnumerable,key:xKey},{col2}...{}]\r\n            return element[\"type\"] == typeToSelect;\r\n        });\r\n        if(_.isUndefined(retArr))\r\n            retArr = null;\r\n        return retArr;\r\n    },\r\n    extractFromCsvStore: function(){//get arr of objects\r\n        //Ex: from csvStore.csvRows = {\"1\":{\"id\":1,\"shipped\":true,\"product\":\"Prod 1\",_id:\"55d3..\"},\"2\":{\"id\":2,\"shipped\":false,\"product\":\"Prod 2\",_id:\"55d3..\"}}\r\n        var retArr=_.map(csvStore.csvRows, function(value,key){return value;});\r\n        return retArr;\r\n    },\r\n    extractFromCsvStoreWith_Id: function(){\r\n        //Ex: from csvStore.csvRows = {\"1\":{\"id\":1,\"shipped\":true,\"product\":\"Prod 1\",_id:\"55d3..\"},\"2\":{\"id\":2,\"shipped\":false,\"product\":\"Prod 2\",_id:\"55d3..\"}}\r\n        var entityName = this.getEntityName();\r\n        var retArr=_.map(csvStore.csvRows, function(value,key){\r\n            var _id = value[\"_id\"];\r\n            var recordEl = FL.API.convertOneRecordTo_arrToSend(entityName,value);////Converts format: {\"name\":cli1,\"city\":\"Lx\",\"country\":\"Pt\"} to {\"d\":{\"51\":\"cli1\",\"52\":\"Lx\",\"53\":\"Pt\"}} \r\n            recordEl[\"_id\"] = _id;\r\n            return recordEl;//returns {_id:x1,d:{\"51\":\"cliente 1\",\"52\":\"Lisboa\",\"53\":\"Portugal\"}\r\n        },this);\r\n        return retArr;\r\n    },\r\n    transformStoreTo: function(newAttributesArr,changedNamesArr,changedTypeArr){//transform the store content according to newAttributesArr and changedNamesArr and  changedTypeArr\r\n        //newAttributesArr - new format of attributes in csvStore.\r\n        //       must have keys attr1..7 = name,description,label,type,typeUI,enumerable and key\r\n        //       [{attr1:x11,attr2:x21.,..attrN:xN1},{attr1:x12,attr2:x22.,..attrN:xN2}...{}]\r\n        // changedNamesArr - is an array with one element per attriobute name change [[],[]...[]]. Each element is [<oldName>,<newName>]\r\n        // changedTypeArr - is an array with one element per type change [[],[]...[]]. Each element is [<oldName>,<oldType>,<newType>]\r\n        // \r\n        //  this method returns true if the change implies losing information, false otherwise     \r\n        var loseInfo = false;\r\n        var attributesArrNoId = this.getAttributesArrNoId();//we retrieve all except name=\"id\"\r\n        //   ex: {name:\"address\",description:\"address to send invoices\",label:\"Address\",type:\"string\",typeUI:\"textbox\",enumerable:null,key:false});                     \r\n        _.each(this.csvRows, function(rowObj,key){//scans each row (an Object) {1:{},2:{}...n:{}} - rowObj is the object\r\n            _.each(changedTypeArr, function(element){\r\n                var name = element[0];\r\n                var oldType = element[1];\r\n                var newType = element[2];\r\n                if(oldType == \"string\" && newType == \"number\"){\r\n                    var numberVal = rowObj[name];\r\n                    this.csvRows[key][name]= FL.common.localeStringToNumber(numberVal,null);\r\n                    loseInfo = true;\r\n                }else if(newType == \"date\"){//covers string->date, number->date\r\n                    if(typeof rowObj[name] != \"date\" ){//if is a string containing a date must be converted\r\n                        this.csvRows[key][name] = new Date( rowObj[name] );//old content in string is converted to date\r\n                        loseInfo = true;\r\n                    }\r\n                }else if(oldType == \"date\" && newType == \"number\"){\r\n                    this.csvRows[key][name] = 0;\r\n                    loseInfo = true;\r\n                }else if(oldType == \"number\" && newType == \"string\"){\r\n                     this.csvRows[key][name] = rowObj[name].toString();\r\n                }\r\n            },this);\r\n            _.each(changedNamesArr, function(element){\r\n                this.csvRows[key][element[1]] = this.csvRows[key][element[0]];//creates a new name key with the content of the old key\r\n                delete this.csvRows[key][element[0]];\r\n            },this);\r\n            var z=32;\r\n        },this);//this is necessary to refer to window.csvStore instead of window\r\n        this.setAttributesArr(newAttributesArr);\r\n        return loseInfo;\r\n    },\r\n    Xis_dictionaryUpdateLoseInformation: function(changedTypeArr){//transform the store content according to newAttributesArr and changedNamesArr and  changedTypeArr\r\n        //similar to transformStoreTo but nothing is changed ->Returns true if dictionary change will impact entity loosing info. False otherwise\r\n        var loseInfo = false;\r\n            _.each(changedTypeArr, function(element){\r\n                var name = element[0];\r\n                var oldType = element[1];\r\n                var newType = element[2];\r\n                if(oldType == \"string\" && newType == \"number\"){\r\n                    loseInfo = true;\r\n                }else if(newType == \"date\"){//covers string->date, number->date\r\n                    loseInfo = true;\r\n                }else if(oldType == \"date\" && newType == \"number\"){\r\n                    loseInfo = true;\r\n                }else if(oldType == \"number\" && newType == \"string\"){\r\n                     //information will be in the string format\r\n                }\r\n            },this);\r\n        return loseInfo;\r\n    },\r\n    store: function( arrToStore ) {//arrToStore is an array of objects [{},{},....{}] where id field is mandatory inside {}\r\n        // this.csvRows = _.object(arrOfIds,arrToStore); //becomes ->{1:arrToStore[1],2:arrToSAtore[2]....} \r\n        this.csvRows = {};\r\n        var arrOfDateAttributes = this.getAttributesOfType(\"date\");\r\n        _.each(arrToStore,function(element,index){//scans each row (an Object)\r\n            var id = (index+1)+\"\";//the json key is a string\r\n            element.id = index+1;//to rename the id sequence - id is anumber\r\n            this.csvRows[id] = element;\r\n            \r\n            //code to convert dateInStringFormat (if any) to date in Javascript date format\r\n            // if(arrOfDateAttributes){\r\n                _.each(arrOfDateAttributes, function(elementCol){\r\n                    if(typeof element[elementCol.name] != \"date\" ){\r\n                        // element[elementCol.name] = new Date(Date.parse(element[elementCol.name]));//old content in string is converted to date\r\n                        element[elementCol.name] = new Date( element[elementCol.name] );//old content in string is converted to date\r\n                    }\r\n                });\r\n            // }\r\n            //-------------------\r\n\r\n        },this);//this is necessary to refer to window.csvStore instead of window\r\n        this.numberOfRows = arrToStore.length;\r\n    },\r\n    changeNameInRows: function(oldName, newName){//updates the key oldname (old attribute name) to newname of all csvRows\r\n        _.each(this.csvRows, function(rowObj,key){//scans each row (an Object) {1:{},2:{}...n:{}} - rowObj is the object\r\n            this.csvRows[newName] = rowObj[oldName];\r\n            delete this.csvRows[oldName];\r\n             var z=32;\r\n        },this);//this is necessary to refer to window.csvStore \r\n    },\r\n    getRowsInArrFormat: function(){//retrieves csvRows object ({1:{},2:{}...n:{}}) in a array format [{},{}...{}]\r\n        var arr =_.map(this.csvRows,function(value,key){//scans each key inside csvRows object\r\n            return value;\r\n        });\r\n        return arr;   \r\n    },\r\n    addOneEmptyRow:function(){//adds one line to csvRrows with empty fields of this.entityName and _id=\"-1\"\r\n        var nextId = this.getNextId();\r\n        //we will extract form dictionary the fields with empty values\r\n        // var oEntity = FL.dd.getEntityBySingular(this.entityName);\r\n        // columnsArr --> Format: [{label:\"xx\",name:fieldName,type:xtype,enumerable:xEnumerable},{col2}...{}]\r\n        var columnsArr = this.getAttributesArr();//returns an array of fields with empty content\r\n        // var newRow = utils.defaultNewGridRow(columnsArr, nextId);\r\n        var newRow = FL.dd.emptyRowForArrOfTypes(columnsArr);\r\n        newRow.id = nextId;\r\n\r\n\r\n        this.csvRows[nextId] = newRow;//becomes ->{93:arrToStore[1],2:arrToSAtore[2]....} \r\n        this.csvRows[nextId][\"_id\"] = \"-1\";//this means a new line that must be inserted in the server\r\n        var z = 32;\r\n    },\r\n    getNextId: function(){//returns a number with the id of the last element + 1 \r\n        var arrOfKeys = _.keys(this.csvRows);\r\n        // arrOfKeys[3] = \"101\";// to test\r\n        var last = _.max(arrOfKeys,function(element){ return  parseInt(element,10); });\r\n        if(arrOfKeys.length === 0 ){\r\n            last = 0;\r\n        }else{\r\n            if( isNaN( this.csvRows[last].id ) )\r\n                last = 0;\r\n        }\r\n        return parseInt(last,10)+1;\r\n    },\r\n    getNumberOfLines: function(){//returns a number with the id of the last element + 1 \r\n        var arrOfKeys = _.keys(this.csvRows);\r\n        var numberOfLines = arrOfKeys.length;\r\n        return numberOfLines;\r\n    },\r\n    populate: function () {\r\n        this.csvRows[1] = {\r\n            id: 1,\r\n            name: \"CHATEAU DE SAINT COSME\",\r\n            year: \"2009\",\r\n            grapes: \"Grenache / Syrah\",\r\n            country: \"France\",\r\n            region: \"Southern Rhone\",\r\n            description: \"The aromas of fruit and spice give one a hint of the light drinkability of this lovely wine, which makes an excellent complement to fish dishes.\",\r\n            picture: \"saint_cosme.jpg\"\r\n        };\r\n        this.csvRows[2] = {\r\n            id: 2,\r\n            name: \"WATERBROOK\",\r\n            year: \"2009\",\r\n            grapes: \"Merlot\",\r\n            country: \"USA\",\r\n            region: \"Washington\",\r\n            description: \"Legend has it the gods didn't share their ambrosia with mere mortals.  This merlot may be the closest we've ever come to a taste of heaven.\",\r\n            picture: \"waterbrook.jpg\"\r\n        };\r\n\r\n        this.numberOfRows = 2;\r\n    },\r\n\r\n    find: function (model) {\r\n        alert(\"memoryCsv find !!!!\");\r\n        return this.csvRows[model.id];//NOT USED\r\n    },\r\n\r\n    findAll: function () {\r\n        return _.values(this.csvRows);//it is used !!!\r\n    },\r\n\r\n    create: function (model) {       \r\n        this.numberOfRows++;\r\n        // model.set('id', this.numberOfRows);\r\n        FL.common.printToConsole(\"memoryCsv.js create new line --->\"+JSON.stringify(model));\r\n        model[\"_id\"] = \"-1\";\r\n        this.csvRows[this.numberOfRows] = model;//it is used !!!\r\n        return model;\r\n    },\r\n\r\n    update: function (model) {\r\n        var def = $.Deferred();\r\n        // alert(\"memoryCsv.js Update was called !!!\");\r\n    // this.csvRows[model.id] = model;//it is used !!!\r\n        //alert(\"memoryCsv.js update modelUpdate !!!! --->\"+ model.get(\"id\") + \" _id=\"+ model.get(\"_id\") + \" nome=\"+model.get(\"nome\"));\r\n        FL.common.printToConsole(\"memoryCsv.js update modelUpdate !!!! --->\"+JSON.stringify(model));\r\n        var rowToSave = model.attributes;\r\n        rowToSave = _.omit(rowToSave, \"_id\");//we exclude the _id key\r\n        var promise = null;\r\n    //if(model.attributes._id == \"-1\"){//this is an update over a new line =>insert in db\r\n        var thiz = this;\r\n        if(this.csvRows[model.id]._id == \"-1\"){//this is an update over a new line =>insert in db\r\n            // promise=FL.API.addRecordsToTable(this.entityName,[model.attributes]);\r\n            promise=FL.API.addRecordsToTable(this.entityName,[rowToSave]);\r\n            promise.done(function(data){\r\n                FL.common.printToConsole(\">>>>>memoryCsv update addRecordsToTable  SUCCESS <<<<<\");\r\n                FL.common.printToConsole(\"memoryCsv.js update addRecordsToTable !!!! --->\"+JSON.stringify(data));\r\n                //data format:\r\n                // [  {\"d\": {\"51\":\"Nome do cliente\",\"52\":\"Cascais\",\"53\":\"Portugal\",\r\n                //        \"54\":[\"cliente@sapo.pt\",\"clienteportugese@gmail.com\"]},\r\n                //     \"r\":[{\"r\":\"59\",\"s\":0,\"e\":\"50\",\"l\":[{\"_id\":\"789fgd89\",\"u\":\"n\"}]}],\r\n                //     \"v\":0,\r\n                //     \"_id\":\"53e1bf93f9b224b302c2a572\"}\r\n                // ]\r\n            // return model;\r\n                model.attributes._id =  data[0]._id;\r\n                thiz.csvRows[model.id] = model.attributes;//copy of server database _id to memory copy\r\n                return def.resolve(model);\r\n            });\r\n            promise.fail(function(err){FL.common.printToConsole(\">>>>>memoryCsv update addRecordsToTable FAILURE <<<<<\"+err);return def.reject(err);});\r\n        }else if(model.attributes._id){//this is an update over an existing line =>update in db\r\n            FL.API.serverCallBlocked = true;//HACK to prevent server call (menu calling a grid) before this promise is resolved\r\n            promise = FL.API.updateRecordToTable(this.entityName,model.attributes);\r\n            promise.done(function(data){\r\n                FL.common.printToConsole(\">>>>>memoryCsv update updateRecordToTable  SUCCESS <<<<< -->\"+JSON.stringify(data));\r\n                thiz.csvRows[model.id] = model.attributes;\r\n                FL.API.serverCallBlocked = false;\r\n                return def.resolve(model);\r\n            });\r\n            promise.fail(function(err){FL.common.printToConsole(\">>>>>memoryCsv update updateRecordToTable FAILURE <<<<<\"+err); FL.API.serverCallBlocked = false; return def.reject(err);});\r\n        }else{\r\n            FL.common.printToConsole(\">>>>>memoryCsv update updateRecordToTable  NOP Nothing was done !!!! <<<<< -->model.attributes._id=\"+model.attributes._id);\r\n            return def.reject(\"memoryCsv update error - missing attribute _id in model\");\r\n        }\r\n        // return model;\r\n        return def.promise();\r\n    },\r\n\r\n    destroy: function (model) {\r\n        FL.common.printToConsole(\"memoryCsv.js - delete row \"+JSON.stringify(model.attributes));\r\n        // var promise=FL.API.removeRecordFromTable(this.entityName,model.attributes);\r\n        // promise.done(function(){\r\n        //     FL.common.printToConsole(\">>>>>memoryCsv destroy removeRecordFromTable SUCCESS <<<<<\");\r\n        //     return model;\r\n        // });\r\n        // promise.fail(function(err){FL.common.printToConsole(\">>>>>memoryCsv destroy removeRecordFromTable FAILURE <<<<<\"+err);return model;});\r\n        delete this.csvRows[model.id];//it is used !!!\r\n        return model;\r\n    },\r\n    sync: function (method, model, options) {//function that Backbone calls every time it attempts to read or save a model to the server.\r\n\r\n        var resp;\r\n        // FL.common.printToConsole(\"Backbone.sync ---------------->\"+method+\" id=\"+model.id);\r\n        FL.common.printToConsole(\"----------------- debug before------------------------------------------\");\r\n\r\n        FL.common.printToConsole(\"csvStore.csvRows[1]:\\n\"+JSON.stringify(csvStore.csvRows[1]));\r\n        FL.common.printToConsole(\"csvStore.csvRows[2]:\\n\"+JSON.stringify(csvStore.csvRows[2]));\r\n        FL.common.printToConsole(\"csvStore.csvRows[3]:\\n\"+JSON.stringify(csvStore.csvRows[3]));\r\n        var last = csvStore.getNextId()-1;\r\n        FL.common.printToConsole(\"LastId= \"+last);\r\n        FL.common.printToConsole(\"csvStore.csvRows[last]:\\n\"+JSON.stringify(csvStore.csvRows[last]));\r\n        FL.common.printToConsole(\"----------------- debug fim ------------------------------------------\");\r\n        // alert(\"Backbone.sync ---------------->\"+method+\" ---> id=\"+model.id);\r\n\r\n        switch (method) {\r\n            case \"read\":\r\n                resp = model.id ? csvStore.find(model) : csvStore.findAll();\r\n                break;\r\n            case \"create\":\r\n                resp = csvStore.create(model);\r\n                break;\r\n            case \"update\":\r\n                // resp = csvStore.update(model);\r\n                csvStore.update(model).then(function(resp){\r\n                        FL.common.printToConsole(\"memoryCsv.js sync update --->\"+JSON.stringify(resp.attributes));\r\n                    },function(err){\r\n                        FL.common.printToConsole(\"memoryCsv.js sync update ERROR --->\");\r\n                    }\r\n                );\r\n                break;\r\n            case \"delete\":\r\n                resp = csvStore.destroy(model);\r\n                break;\r\n        }\r\n\r\n        if(options) {\r\n            if (resp) {\r\n                options.success(resp);\r\n            } else {\r\n                options.error(\"Record not found\");\r\n            }\r\n        }\r\n        // FL.common.printToConsole(\"csvStore.csvRows:\\n\"+JSON.stringify(csvStore.csvRows));\r\n        FL.common.printToConsole(\"----------------- debug after------------------------------------------\");\r\n\r\n        FL.common.printToConsole(\"csvStore.csvRows[1]:\\n\"+JSON.stringify(csvStore.csvRows[1]));\r\n        FL.common.printToConsole(\"csvStore.csvRows[2]:\\n\"+JSON.stringify(csvStore.csvRows[2]));\r\n        FL.common.printToConsole(\"csvStore.csvRows[3]:\\n\"+JSON.stringify(csvStore.csvRows[3]));\r\n        last = csvStore.getNextId()-1;\r\n        FL.common.printToConsole(\"LastId= \"+last);\r\n        FL.common.printToConsole(\"csvStore.csvRows[last]:\\n\"+JSON.stringify(csvStore.csvRows[last]));\r\n\r\n        FL.common.printToConsole(\"----------------- debug fim ------------------------------------------\");\r\n\r\n        // alert(\"Leaving csv.Store !!!\");\r\n\r\n    },\r\n    // currentGridCandidate:'',\r\n    currentGridCandidate:{fileName:'',entityName:null},\r\n    arrayOfGrids: [],//array with pairs [[entitySingularName,{a JSON of JSONs with csvRows}],[xxx,{}],.....]\r\n    insertInArrayOfGrids: function(singularEntityName) {//inserts current JSON of JSONs in an pair array with first element = singular\r\n        this.arrayOfGrids.push([singularEntityName,csvStore.csvRows]);\r\n    },\r\n    setGrid: function(singular){\r\n        var arrPair = _.find(this.arrayOfGrids, function(element) {return element[0] == singular;});\r\n        this.csvRows = arrPair[1];\r\n    }\r\n};\r\n\r\n// csvStore.populate();\r\n\r\n// Overriding Backbone's sync method. Replace the default RESTful services-based implementation\r\n// with a simple in-memory approach.\r\n//Backbone.sync = store.sync;\r\n// Backbone.sync = function (method, model, options) {"]}